---
# Default variables
# =================

# .. contents:: Sections
#    :local:
#
# ------------------------------------
#   General configuration
# ------------------------------------

# .. envvar:: varnish__privileged_group
#
# What system group has privileged access to :program:`varnish` service.
varnish__privileged_group: 'webadmins'


# ------------------------------------
#   Varnish server configuration
# ------------------------------------

# .. envvar:: varnish__listen
#
# Port that Varnish listens to for requests
varnish__listen: '6081'

# .. envvar:: varnish__admin_listen
#
# Port for Varnish admin
varnish__admin_listen: '6082'

# .. envvar:: varnish__memory_allocation
#
# How much memory is reserved for the Varnish cache
varnish__memory_allocation: '{{ 0.5 * ansible_memtotal_mb|int }}m'

# .. envvar:: varnish__ttl
#
# Default time to live (TTL) for cached objects.
varnish__ttl: '120'


# ------------------------------------
#   Backend Configuration
# ------------------------------------

# .. envvar:: varnish__backend_host
#
# Backend server host.
varnish__backend_host: '127.0.0.1'

# .. envvar:: varnish__backend_port
#
# Backend server port.
varnish__backend_port: '8080'

# .. envvar:: varnish__backend_max_connections
#
# How many connections to the backend are allowed.
varnish__backend_max_connections: 300

# .. envvar:: varnish__backend_first_byte_timeout
#
# How long to wait before we receive a response from the backend.
varnish__backend_first_byte_timeout: '300s'

# .. envvar:: varnish__backend_connect_timeout
#
# How long to wait for a connection to the backend.
varnish__backend_connect_timeout: '5s'

# .. envvar:: varnish__backend_between_bytes_timeout
#
# How long to wait between two subsequent successful reads from the backend.
varnish__backend_between_bytes_timeout: '2s'

# .. envvar:: varnish__backend_probe_request
#
# The request sent when polling a Varnish backend.
varnish__backend_probe_request: 'HEAD / HTTP/1.1'

# .. envvar:: varnish__backend_probe_user_agent
#
# The user agent sent when polling a Varnish backend.
varnish__backend_probe_user_agent: 'Varnish Health Probe'

# .. envvar:: varnish__backend_probe_host
#
# The value of the host header of the poll.
varnish__backend_probe_host: 'localhost'

# .. envvar:: varnish__backend_probe_interval
#
# How long time to wait between polls to the backend.
varnish__backend_probe_interval: '5s'

# .. envvar:: varnish__backend_probe_timeout
#
# How long to wait before timing out the probe to the backend.
varnish__backend_probe_timeout: '1s'

# .. envvar:: varnish__backend_probe_window
#
# How many of the latest polls to consider when determining if the backend is healthy.
varnish__backend_probe_window: 5

# .. envvar:: varnish__backend_probe_threshold
#
# How many of the window last polls must be good for the backend to be declared healthy.
varnish__backend_probe_threshold: 3

# .. envvar:: varnish__backends
#
# Manage Varnish backends.
#
# ``name``
#   Name of the backend.
#
# ``host``
#   The backend server host.
#
# ``port``
#   The backend server port.
#
# ``max_connections``
#   How many connections to the backend are allowed.
#
# ``probe``
#   Determines whether Varnish will poll the backend.
#
# ``probe_request``
#   The request sent when polling the backend.
#
# ``probe_host``
#   The host header when polling the backend.
#
# ``probe_user_agent``
#   The user agent header when polling the backend.
#
# ``probe_interval``
#   How long time to wait between polls to the backend.
#
# ``probe_timeout``
#   How long to wait before timing out the probe to the backend.
#
# ``probe_window``
#   How many of the latest polls to consider when determining if the backend is healthy.
#
# ``probe_threshold``
#   How many of the window last polls must be good for the backend to be declared healthy.
#
# ``first_byte_timeout``
#   How long to wait before we receive a response from the backend.
#
# ``connect_timeout``
#   How long to wait for a connection to the backend.
#
# ``between_bytes_timeout``
#   How long to wait between two subsequent successful reads from the backend.
#
varnish__backends:
  - name: 'default'


# ------------------------------------
#   Varnish caching configuration
# ------------------------------------

# .. envvar:: varnish__add_ban_lurker_headers
#
# Whether to add ban lurker headers to backend response. These headers are the primary mechanism
# used by the Varnish ban lurker to clear out banned cache objects.
varnish__add_ban_lurker_headers: False

# .. envvar:: varnish__cache_static_files
#
# Determines if the cache should store static files. This consumes a lot more memory. Disable this
# if your dynamic pages are getting evicted too fast.
# Read more here: https://ma.ttias.be/stop-caching-static-files/
varnish__cache_static_files: True

# .. envvar:: varnish__normalize_query_parameters
#
# Normalizing query parameters lets Varnish cache variations of the same URL.
# This might cause some issues with some script minimization systems.
varnish__normalize_query_parameters: True

# .. envvar:: varnish__purge_allow
#
# List of IP addresses that are allowed to purge the Varnish cache.
varnish__purge_allow: [ '127.0.0.1', '::1' ]

# .. envvar:: varnish__purge_condition
#
# Dictionary of conditions that will run when vcl_recv receives a purge request.
varnish__purge_conditions:
  '!client.ip ~ purge': 'return (synth(405, "This IP is not allowed to send PURGE requests."));'

# .. envvar:: varnish__vcl_backend_response_conditions
#
# Dictionary of conditions that will run at the end the vcl_recv subroutine.
varnish__vcl_backend_response_conditions: {}

# .. envvar:: varnish__vcl_recv_conditions
#
# Dictionary of conditions that will run at the end the vcl_recv subroutine.
varnish__vcl_recv_conditions: {}

# .. envvar:: varnish__vcl_recv_remove_parameters
#
# Regular expression for query parameters that need to be removed during the vcl_recv subroutine.
varnish__vcl_recv_remove_parameters: 'utm_(campaign|medium|source|term)|gclid|cx|ie|cof|siteurl'

# .. envvar:: varnish__vcl_recv_remove_cookies
#
# List of regular expressions for cookies that need to be removed during the vcl_recv subroutine
varnish__vcl_recv_remove_cookies:
  - 'has_js=[^;]+(; )?'
  - '__utm.=[^;]+(; )?'
  - '_ga=[^;]+(; )?'
  - 'utmctr=[^;]+(; )?'
  - 'utmcmd.=[^;]+(; )?'
  - 'utmccn.=[^;]+(; )?'
  - '__gads=[^;]+(; )?'
  - '__qc.=[^;]+(; )?'
  - '__atuv.=[^;]+(; )?'
